version: '3.9'
services:
  backend:
    build: ./backend
    container_name: backend_container
    ports:
      - '8001:8001'
    volumes:
      - ./backend:/usr/src/app
    restart: always
    networks:
      - queue-net

  # frontend:
  #   build: ./frontend
  #   container_name: frontend_container
  #   ports:
  #     - '5173:5173'
  #   restart: always
  #   volumes:
  #     - ./frontend:/usr/src/app
  #     - /usr/src/app/node_modules
  #   networks:
  #     - queue-net
  #   depends_on:
  #     - backend
  #     - server
  
  frontend:
    build: ./frontend
    container_name: frontend_container
    restart: always
    env_file:
      - ./.env
    ports:
      - 5173:80
    depends_on:
      - server
      - backend
    networks:
      - queue-net

  mongo:
    container_name: mongo_container
    image: 'mongo'
    volumes:
      - mongo-data:/data/db
    networks:
      - queue-net
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    command: mongod --bind_ip_all
    restart: always
  cache:
    container_name: cache_container
    image: redis:latest
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - cache:/data
    networks:
      - queue-net
  
  server:
    container_name: server_container
    build: ./server
    ports:
      - '5000:5000'
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - mongo
      - cache
    environment:
      PORT: ${PORT}
      MONGO_DB_URI: ${MONGO_DB_URI}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRY: ${REFRESH_TOKEN_EXPIRY}
      JWT_EXPIRY: ${JWT_EXPIRY}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
    networks:
      - queue-net

  scheduler:
    build: ./scheduler
    container_name: scheduler_container
    volumes:
      - ./scheduler:/usr/src/app  
    networks:
      - queue-net
    restart: always
    command: cron -f  
    # command: python3 /usr/src/app/schedule.py

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx:/usr/src/app
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt/live/www.scales.uxlivinglab.online/fullchain.pem:/etc/letsencrypt/live/www.scales.uxlivinglab.online/fullchain.pem:ro
      - /etc/letsencrypt/live/www.scales.uxlivinglab.online/privkey.pem:/etc/letsencrypt/live/www.scales.uxlivinglab.online/privkey.pem:ro
    restart: always
    networks:
      - queue-net
    depends_on:
      - backend
      - frontend

networks:
  queue-net:
    driver: bridge

volumes:
  mongo-data:
  cache:
